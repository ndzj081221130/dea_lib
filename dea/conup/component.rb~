# coding: UTF-8

require "steno"
require "steno/core_ext"
require "monitor"

module Dea
  class ComponentObject
    attr_accessor :identifier #String
    attr_accessor :componentVersion #String
    
    attr_accessor :algorithmConf #String
    attr_accessor :freenessConf
    attr_accessor :staticDeps #set<String>
    attr_accessor :staticInDeps #set<string>
    
    attr_accessor :implType # String
    attr_accessor :isTargetComp #boolean
    
    attr_accessor :ondemandSyncMonitor #sync object
    attr_accessor :validToFreeSyncMonitor#sync object
    attr_accessor :updatingSyncMonitor #sync object
    attr_accessor :waitingRemoteCompUpdateDoneMonitor #sync object
    attr_accessor :freezeSyncMonitor #sync object
    
    
    def initialize(id,version,algconf,freeConf, deps, indeps,impltype)
      @identifier = id
      @componentVersion = version
      @algorithmConf = algconf
      @freenessConf = freeConf
      @staticDeps = deps
      @staticInDeps = indeps
      @implType = impltype
      
      @ondemandSyncMonitor="1"
      @ondemandSyncMonitor.extend(MonitorMixin)
      
      @validToFreeSyncMonitor="2"
      @validToFreeSyncMonitor.extend(MonitorMixin)
      
      @updatingSyncMonitor="3"
      @updatingSyncMonitor.extend(MonitorMixin)
      
      @watingRemoteCompUpdateMonitor="4"
      @watingRemoteCompUpdateMonitor.extend(MonitorMixin)
      
      @freezeSyncMonitor="5"
      @freezeSyncMonitor.extend(MonitorMixin)
    end
    
    private_class_method :new
     
    
     
    
    @@componentObject = nil
    
    def ComponentObject.instance(id,v,alg,free,dep,indep,type)
      @@componentObject = ComponentObject.new(id,v,alg,free,dep,indep,type) unless @@componentObject
      @@componentObject
    end
    
    def updateIsReceive
      @isTargetComp= true
    end
    
    def updateIsDone
      @isTargetComp= false
    end
    
    
    
  end
end