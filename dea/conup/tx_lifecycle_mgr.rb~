# coding: UTF-8

require "steno"
require "steno/core_ext"
require "uuid"
require "set"
require_relative "./tx_context"
require_relative "./component"
require_relative "./tx_registry"
require_relative "./comp_lifecycle_mgr"
require_relative "./tx_dep_monitor"
require_relative "./tx_event_type"
require_relative "./tx_dep"


module Dea
  
  class TxLifecycleManager
    # one dea has only one txLifecycleMgr, so  it is a singleton
    attr_accessor :txRegistry # TxRegistry
    attr_accessor :compObject
    # attr_accessor :
    def initialize(comp) # comp is ComponentObject
      @compObject = comp
      @txRegistry = Dea::TransactionRegistry.new
    end
    
    private_class_method :new
    
    @@txLifecycleMgr = nil
    
    def TxLifecycleManager.instance(comp) # pass an componentObject
      @@txLifecycleMgr = new(comp) unless @@txLifecycleMgr
      @@txLifecycleMgr
    end
    
    def createID(id)
      #TODO here,there are two kinds of txContext
      # 1 has no parent/root
      # 2 has parent/root 
      
      #generate an id?
     # id = "fdfad-4525-fgsg-5644"
     # java used InterceptorCache to share root/parent and tx/comp information between different interceptors
     # if InterceptorCache.getInstace(compObj).getTxCtx(getThreadID())!=null
     # then txContext = InterceptorCache.getInstace(compObj).getTxCtx(getThreadID() )
     #else we new a txContext and add <getThreadID(), txContext > to InterceptorCache
      txContext = Dea::TxContext.new
      txContext.currentTx= id
      txContext.parentTx = id
      txContext.rootTx = id
      
      txContext.hostComponent=@compObject.identifier 
      txContext.parentComponent= @compObject.identifier
      txContext.rootComponent= @compObject.identifier   
      # invocationSequence should not be null
      #txContext.invocationSequence = ??? we don't need this
      
      @txRegistry.addTransactionContext(id,txContext)
    end
    
    def createFakeTxId # if our tx id is generated by 
       uuid = UUID.new
       return uuid.generate
    end
    
    def destroyID(id)
      @txRegistry.removeTransactionContext(id)
    end
    def getCompIdentifier
      return @compObject.identifier
    end
    
    def getTransactionContext(curTxID)
      return @txRegistry.getTransactionContext(curTxID)
    end
    
    def getTxs
      return @txRegistry.getTransactionContexts()
    end
    #called by who ???
    def rootTxEnd(hostComp, rootid)
       compObject = Dea::ComponentObject.instance(hostComp,nil,nil,nil,nil,nil,nil)
       compLifecycleMgr = Dea::CompLifecycleManager.instance(compObject)
       
       # TODO get update manager
       validToFreeSyncMonitor = compLifecycleMgr.compObj.validToFreeSyncMonitor
       puts "txID= #{rootid} , hostComp: #{hostComp}, compStatus: #{compLifecycleMgr.compStatus}"
       validToFreeSyncMonitor.synchronize do
         # TODO updateManager.removeAlgorithmOldRootTx(rootid)
       end
    end
    
    def initLocalSubTx(subHostComp,fakeSubTx, txContextCache) # String , String , TransactionContext txCtxInCache
        #depMgr = Dea::DynamicDepManager.instance(hostComp)
         
        #component = Dea::ComponentObject.instance(hostComp,nil,nil,nil,nil,nil,nil)
	 
        #txDepMonitor = Dea::TxDepMonitor.instance(component)
        
        #txDepRegistry = txDepMonitor.txDepRegistry
        
        
        parentComp = txContextCache.parentComponent
        parentTx = txContextCache.parentTx
        rootTx = txContextCache.rootTx
        rootComp = txContextCache.rootComponent
        
        txContext = Dea::TxContext.new
        
        txContext.isFakeTx=true
        
        txContext.currentTx=fakeSubTx
        txContext.hostComponent= subHostComp
        
	puts "in tx lifecycle mgr initSub #{txContext.hostComponent == nil } , }"
        txContext.eventType=TxEventType::TransactionStart
        
        txDep = Dea::TxDep.new(Set.new, Set.new)
        
        txDepRegistry.addLocalDep(fakeSubTx,txDep)
        
        txContext.parentComponent=parentComp
        txContext.parentTx=parentTx
        
        txContext.rootTx=rootTx
        txContext.rootComponent= rootComp
        
        @txRegistry.addTransactionContext(fakeSubTx,txContext)
        
       # return depMgr.initLocalSubTx(txContext)
        
    end
    
    def endLocalSubTx(hostComp, fakeSubTx) # String ,string
      depMgr = Dea::DynamicDepManager.instance(hostComp)
      component = Dea::ComponentObject.instance(hostComp,nil,nil,nil,nil,nil,nil)
      
      compLifecycleMgr = Dea::CompLifecycleManager.instance(component)
      
      txDepMonitor = Dea::TxDepMonitor.instance(component)
      
      txDepRegistry = txDepMonitor.txDepRegistry
      
      proxyRootTxId = nil
      
      ondemandMonitor = component.ondemandSyncMonitor
      
      ondemandMonitor.synchronize do
        
        fakeSubTxCtx = depMgr.getTxs()[fakeSubTx]
        if !fakeSubTxCtx
          proxyRootTxId = fakeSubTxCtx.getProxyRootTxId(depMgr.scope)
          
        end
        
        depMgr.getTxs().delete(fakeSubTx)
        
        txDepRegistry.removeLocalDep(fakeSubTx)
      end
      
      proxyRootTxId
    end
    
    def resolveInvocationContext(invocationContext, hostComp)
      
    end
    
    def createInvocation(hostComp, serviceName, txDepMonitor)
      
    end
    
    def startRemoteSubTx(invocationCtx)
      # hostComp = 
    end
    
    def endRemoteSubTx(invocationCtx , proxyRootTxId) # InvocationContext, String
      
    end
    
    def updateTxContext(currentTxID, txContext) # string , TransactionContext
      if ! @txRegistry.contains(currentTxID)
        @txRegistry.addTransactionContext(currentTxID , txContext)
      else
        @txRegistry.updateTransactionContext(currentTxID , txContext)
      end
      
    end
    
    def getTransactionContext(curTxID)
      return @txRegistry.getTransactionContext(curTxID)
    end
    
    def removeTransactionContext(curTxID)
      @txRegistry.removeTransactionContext(curTxID)
    end
    
    def getThreadID
      # ???
    end
    
    
    
    
    
  end
end
